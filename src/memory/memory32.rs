use std::{rc::Rc, cell::RefCell, ops::Deref, collections::{HashMap, BTreeMap, BTreeSet}};

use crate::{ScfiaStdlib, values::{bit_vector_concrete::BitVectorConcrete, ActiveValue, RetiredValue}, models::riscv::rv32i::ForkSink};
use crate::memory::MemoryRegion32;

use super::{stable_memory_region32::StableMemoryRegion32, volatile_memory_region::VolatileMemoryRegion32};



const HINTS1: [u64; 1024] = [1174421508, 1174421510, 1174421512, 1174421514, 1174421516, 1174421518, 1174421520, 1174421522, 1174421524, 1174421526, 1174421528, 1174421530, 1174421532, 1174421534, 1174421536, 1174421538, 1174421540, 1174421542, 1174421544, 1174421546, 1174421548, 1174421550, 1174421552, 1174421554, 1174421556, 1174421558, 1174421560, 1174421562, 1174421564, 1174421566, 1174421568, 1174421570, 1174421572, 1174421574, 1174421576, 1174421578, 1174421580, 1174421582, 1174421584, 1174421586, 1174421588, 1174421590, 1174421592, 1174421594, 1174421596, 1174421598, 1174421600, 1174421602, 1174421604, 1174421606, 1174421608, 1174421610, 1174421612, 1174421614, 1174421616, 1174421618, 1174421620, 1174421622, 1174421624, 1174421626, 1174421628, 1174421630, 1174421632, 1174421634, 1174421636, 1174421638, 1174421640, 1174421642, 1174421644, 1174421646, 1174421648, 1174421650, 1174421652, 1174421654, 1174421656, 1174421658, 1174421660, 1174421662, 1174421664, 1174421666, 1174421668, 1174421670, 1174421672, 1174421674, 1174421676, 1174421678, 1174421680, 1174421682, 1174421684, 1174421686, 1174421688, 1174421690, 1174421692, 1174421694, 1174421696, 1174421698, 1174421700, 1174421702, 1174421704, 1174421706, 1174421708, 1174421710, 1174421712, 1174421714, 1174421716, 1174421718, 1174421720, 1174421722, 1174421724, 1174421726, 1174421728, 1174421730, 1174421732, 1174421734, 1174421736, 1174421738, 1174421740, 1174421742, 1174421744, 1174421746, 
1174421748, 1174421750, 1174421752, 1174421754, 1174421756, 1174421758, 1174421760, 1174421762, 1174421764, 1174421766, 1174421768, 1174421770, 1174421772, 1174421774, 1174421776, 1174421778, 1174421780, 1174421782, 1174421784, 1174421786, 1174421788, 1174421790, 1174421792, 1174421794, 1174421796, 1174421798, 1174421800, 1174421802, 1174421804, 1174421806, 1174421808, 1174421810, 1174421812, 1174421814, 1174421816, 1174421818, 1174421820, 1174421822, 1174421824, 1174421826, 1174421828, 1174421830, 1174421832, 1174421834, 1174421836, 1174421838, 1174421840, 1174421842, 1174421844, 1174421846, 1174421848, 1174421850, 1174421852, 1174421854, 1174421856, 1174421858, 1174421860, 1174421862, 1174421864, 1174421866, 1174421868, 1174421870, 1174421872, 1174421874, 1174421876, 1174421878, 1174421880, 1174421882, 1174421884, 1174421886, 1174421888, 1174421890, 1174421892, 1174421894, 1174421896, 1174421898, 1174421900, 1174421902, 1174421904, 1174421906, 1174421908, 1174421910, 1174421912, 1174421914, 1174421916, 1174421918, 1174421920, 1174421922, 1174421924, 1174421926, 1174421928, 1174421930, 1174421932, 1174421934, 1174421936, 1174421938, 1174421940, 1174421942, 1174421944, 1174421946, 1174421948, 1174421950, 1174421952, 1174421954, 1174421956, 1174421958, 1174421960, 1174421962, 1174421964, 1174421966, 1174421968, 1174421970, 1174421972, 1174421974, 1174421976, 1174421978, 1174421980, 1174421982, 1174421984, 1174421986, 1174421988, 1174421990, 1174421992, 1174421994, 1174421996, 1174421998, 1174422000, 1174422002, 1174422004, 1174422006, 1174422008, 
1174422010, 1174422012, 1174422014, 1174422016, 1174422018, 1174422020, 1174422022, 1174422024, 1174422026, 1174422028, 1174422030, 1174422032, 1174422034, 1174422036, 1174422038, 1174422040, 1174422042, 1174422044, 1174422046, 1174422048, 1174422050, 1174422052, 1174422054, 1174422056, 1174422058, 1174422060, 1174422062, 1174422064, 1174422066, 1174422068, 1174422070, 1174422072, 1174422074, 1174422076, 1174422078, 1174422080, 1174422082, 1174422084, 1174422086, 1174422088, 1174422090, 1174422092, 1174422094, 1174422096, 1174422098, 1174422100, 1174422102, 1174422104, 1174422106, 1174422108, 1174422110, 1174422112, 1174422114, 1174422116, 1174422118, 1174422120, 1174422122, 1174422124, 1174422126, 1174422128, 1174422130, 1174422132, 1174422134, 1174422136, 1174422138, 1174422140, 1174422142, 1174422144, 1174422146, 1174422148, 1174422150, 1174422152, 1174422154, 1174422156, 1174422158, 1174422160, 1174422162, 1174422164, 1174422166, 1174422168, 1174422170, 1174422172, 1174422174, 1174422176, 1174422178, 1174422180, 1174422182, 1174422184, 1174422186, 1174422188, 1174422190, 1174422192, 1174422194, 1174422196, 1174422198, 1174422200, 1174422202, 1174422204, 1174422206, 1174422208, 1174422210, 1174422212, 1174422214, 1174422216, 1174422218, 1174422220, 1174422222, 1174422224, 1174422226, 1174422228, 1174422230, 1174422232, 1174422234, 1174422236, 1174422238, 1174422240, 1174422242, 1174422244, 1174422246, 1174422248, 1174422250, 1174422252, 1174422254, 1174422256, 1174422258, 1174422260, 1174422262, 1174422264, 1174422266, 1174422268, 1174422270, 
1174422272, 1174422274, 1174422276, 1174422278, 1174422280, 1174422282, 1174422284, 1174422286, 1174422288, 1174422290, 1174422292, 1174422294, 1174422296, 1174422298, 1174422300, 1174422302, 1174422304, 1174422306, 1174422308, 1174422310, 1174422312, 1174422314, 1174422316, 1174422318, 1174422320, 1174422322, 1174422324, 1174422326, 1174422328, 1174422330, 1174422332, 1174422334, 1174422336, 1174422338, 1174422340, 1174422342, 1174422344, 1174422346, 1174422348, 1174422350, 1174422352, 1174422354, 1174422356, 1174422358, 1174422360, 1174422362, 1174422364, 1174422366, 1174422368, 1174422370, 1174422372, 1174422374, 1174422376, 1174422378, 1174422380, 1174422382, 1174422384, 1174422386, 1174422388, 1174422390, 1174422392, 1174422394, 1174422396, 1174422398, 1174422400, 1174422402, 1174422404, 1174422406, 1174422408, 1174422410, 1174422412, 1174422414, 1174422416, 1174422418, 1174422420, 1174422422, 1174422424, 1174422426, 1174422428, 1174422430, 1174422432, 1174422434, 1174422436, 1174422438, 1174422440, 1174422442, 1174422444, 1174422446, 1174422448, 1174422450, 1174422452, 1174422454, 1174422456, 1174422458, 1174422460, 1174422462, 1174422464, 1174422466, 1174422468, 1174422470, 1174422472, 1174422474, 1174422476, 1174422478, 1174422480, 1174422482, 1174422484, 1174422486, 1174422488, 1174422490, 1174422492, 1174422494, 1174422496, 1174422498, 1174422500, 1174422502, 1174422504, 1174422506, 1174422508, 1174422510, 1174422512, 1174422514, 1174422516, 1174422518, 1174422520, 1174422522, 1174422524, 1174422526, 1174422528, 1174422530, 1174422532, 
1174422534, 1174422536, 1174422538, 1174422540, 1174422542, 1174422544, 1174422546, 1174422548, 1174422550, 1174422552, 1174422554, 1174422556, 1174422558, 1174422560, 1174422562, 1174422564, 1174422566, 1174422568, 1174422570, 1174422572, 1174422574, 1174422576, 1174422578, 1174422580, 1174422582, 1174422584, 1174422586, 1174422588, 1174422590, 1174422592, 1174422594, 1174422596, 1174422598, 1174422600, 1174422602, 1174422604, 1174422606, 1174422608, 1174422610, 1174422612, 1174422614, 1174422616, 1174422618, 1174422620, 1174422622, 1174422624, 1174422626, 1174422628, 1174422630, 1174422632, 1174422634, 1174422636, 1174422638, 1174422640, 1174422642, 1174422644, 1174422646, 1174422648, 1174422650, 1174422652, 1174422654, 1174422656, 1174422658, 1174422660, 1174422662, 1174422664, 1174422666, 1174422668, 1174422670, 1174422672, 1174422674, 1174422676, 1174422678, 1174422680, 1174422682, 1174422684, 1174422686, 1174422688, 1174422690, 1174422692, 1174422694, 1174422696, 1174422698, 1174422700, 1174422702, 1174422704, 1174422706, 1174422708, 1174422710, 1174422712, 1174422714, 1174422716, 1174422718, 1174422720, 1174422722, 1174422724, 1174422726, 1174422728, 1174422730, 1174422732, 1174422734, 1174422736, 1174422738, 1174422740, 1174422742, 1174422744, 1174422746, 1174422748, 1174422750, 1174422752, 1174422754, 1174422756, 1174422758, 1174422760, 1174422762, 1174422764, 1174422766, 1174422768, 1174422770, 1174422772, 1174422774, 1174422776, 1174422778, 1174422780, 1174422782, 1174422784, 1174422786, 1174422788, 1174422790, 1174422792, 1174422794, 
1174422796, 1174422798, 1174422800, 1174422802, 1174422804, 1174422806, 1174422808, 1174422810, 1174422812, 1174422814, 1174422816, 1174422818, 1174422820, 1174422822, 1174422824, 1174422826, 1174422828, 1174422830, 1174422832, 1174422834, 1174422836, 1174422838, 1174422840, 1174422842, 1174422844, 1174422846, 1174422848, 1174422850, 1174422852, 1174422854, 1174422856, 1174422858, 1174422860, 1174422862, 1174422864, 1174422866, 1174422868, 1174422870, 1174422872, 1174422874, 1174422876, 1174422878, 1174422880, 1174422882, 1174422884, 1174422886, 1174422888, 1174422890, 1174422892, 1174422894, 1174422896, 1174422898, 1174422900, 1174422902, 1174422904, 1174422906, 1174422908, 1174422910, 1174422912, 1174422914, 1174422916, 1174422918, 1174422920, 1174422922, 1174422924, 1174422926, 1174422928, 1174422930, 1174422932, 1174422934, 1174422936, 1174422938, 1174422940, 1174422942, 1174422944, 1174422946, 1174422948, 1174422950, 1174422952, 1174422954, 1174422956, 1174422958, 1174422960, 1174422962, 1174422964, 1174422966, 1174422968, 1174422970, 1174422972, 1174422974, 1174422976, 1174422978, 1174422980, 1174422982, 1174422984, 1174422986, 1174422988, 1174422990, 1174422992, 1174422994, 1174422996, 1174422998, 1174423000, 1174423002, 1174423004, 1174423006, 1174423008, 1174423010, 1174423012, 1174423014, 1174423016, 1174423018, 1174423020, 1174423022, 1174423024, 1174423026, 1174423028, 1174423030, 1174423032, 1174423034, 1174423036, 1174423038, 1174423040, 1174423042, 1174423044, 1174423046, 1174423048, 1174423050, 1174423052, 1174423054, 1174423056, 
1174423058, 1174423060, 1174423062, 1174423064, 1174423066, 1174423068, 1174423070, 1174423072, 1174423074, 1174423076, 1174423078, 1174423080, 1174423082, 1174423084, 1174423086, 1174423088, 1174423090, 1174423092, 1174423094, 1174423096, 1174423098, 1174423100, 1174423102, 1174423104, 1174423106, 1174423108, 1174423110, 1174423112, 1174423114, 1174423116, 1174423118, 1174423120, 1174423122, 1174423124, 1174423126, 1174423128, 1174423130, 1174423132, 1174423134, 1174423136, 1174423138, 1174423140, 1174423142, 1174423144, 1174423146, 1174423148, 1174423150, 1174423152, 1174423154, 1174423156, 1174423158, 1174423160, 1174423162, 1174423164, 1174423166, 1174423168, 1174423170, 1174423172, 1174423174, 1174423176, 1174423178, 1174423180, 1174423182, 1174423184, 1174423186, 1174423188, 1174423190, 1174423192, 1174423194, 1174423196, 1174423198, 1174423200, 1174423202, 1174423204, 1174423206, 1174423208, 1174423210, 1174423212, 1174423214, 1174423216, 1174423218, 1174423220, 1174423222, 1174423224, 1174423226, 1174423228, 1174423230, 1174423232, 1174423234, 1174423236, 1174423238, 1174423240, 1174423242, 1174423244, 1174423246, 1174423248, 1174423250, 1174423252, 1174423254, 1174423256, 1174423258, 1174423260, 1174423262, 1174423264, 1174423266, 1174423268, 1174423270, 1174423272, 1174423274, 1174423276, 1174423278, 1174423280, 1174423282, 1174423284, 1174423286, 1174423288, 1174423290, 1174423292, 1174423294, 1174423296, 1174423298, 1174423300, 1174423302, 1174423304, 1174423306, 1174423308, 1174423310, 1174423312, 1174423314, 1174423316, 1174423318, 
1174423320, 1174423322, 1174423324, 1174423326, 1174423328, 1174423330, 1174423332, 1174423334, 1174423336, 1174423338, 1174423340, 1174423342, 1174423344, 1174423346, 1174423348, 1174423350, 1174423352, 1174423354, 1174423356, 1174423358, 1174423360, 1174423362, 1174423364, 1174423366, 1174423368, 1174423370, 1174423372, 1174423374, 1174423376, 1174423378, 1174423380, 1174423382, 1174423384, 1174423386, 1174423388, 1174423390, 1174423392, 1174423394, 1174423396, 1174423398, 1174423400, 1174423402, 1174423404, 1174423406, 1174423408, 1174423410, 1174423412, 1174423414, 1174423416, 1174423418, 1174423420, 1174423422, 1174423424, 1174423426, 1174423428, 1174423430, 1174423432, 1174423434, 1174423436, 1174423438, 1174423440, 1174423442, 1174423444, 1174423446, 1174423448, 1174423450, 1174423452, 1174423454, 1174423456, 1174423458, 1174423460, 1174423462, 1174423464, 1174423466, 1174423468, 1174423470, 1174423472, 1174423474, 1174423476, 1174423478, 1174423480, 1174423482, 1174423484, 1174423486, 1174423488, 1174423490, 1174423492, 1174423494, 1174423496, 1174423498, 1174423500, 1174423502, 1174423504, 1174423506, 1174423508, 1174423510, 1174423512, 1174423514, 1174423516, 1174423518, 1174423520, 1174423522, 1174423524, 1174423526, 1174423528, 1174423530, 1174423532, 1174423534, 1174423536, 1174423538, 1174423540, 1174423542, 1174423544, 1174423546, 1174423548, 1174423550, 1174423552, 1174423554];

#[derive(Debug)]
pub struct Memory32 {
    pub stable_memory_regions: Vec<StableMemoryRegion32>,
    pub volatile_memory_regions: Vec<VolatileMemoryRegion32>,
}

impl Memory32 {
    pub fn new() -> Self {
        Memory32 {
            stable_memory_regions: vec![],
            volatile_memory_regions: vec![],
        }
    }

    pub fn read(&mut self, address: Rc<RefCell<ActiveValue>>, width: u32, stdlib: &mut ScfiaStdlib, fork_sink: &mut Option<&mut ForkSink>) -> Rc<RefCell<ActiveValue>> {
        let address = address.try_borrow().unwrap();
        match &*address {
            ActiveValue::BitvectorConcrete(e) => {
                self.read_concrete(e.value as u32, width, stdlib, fork_sink)
            },
            _ => panic!(),
        }
    }
    
    pub fn write(&mut self, address: Rc<RefCell<ActiveValue>>, value: Rc<RefCell<ActiveValue>>, width: u32, stdlib: &mut ScfiaStdlib, fork_sink: &mut Option<&mut ForkSink>) {
        let address = address.try_borrow().unwrap();
        match &*address {
            ActiveValue::BitvectorConcrete(e) => {
                self.write_concrete(e.value as u32, value, width, stdlib, fork_sink)
            },
            x => {
                // A symbolic write is occuring! These can be
                // - unanimous, i.e. the symbol points to exactly one memory location
                // - irrelevant, i.e. the symbol points to volatile memory locations only
                // - symbolic offset, i.e. the symbol points to a concrete offset of a symbolic region
                let mut candidates = BTreeSet::new();
                for candidate in HINTS1 {
                    candidates.insert(candidate);
                }
                // println!("monomorphizing expression {}", x.get_id());
                stdlib.monomorphize(x.get_z3_ast(), &mut candidates);
                if candidates.len() == 1 {
                    // unanimous
                    let address = candidates.iter().next().unwrap();
                    self.write_concrete(*address as u32, value, width, stdlib, fork_sink)
                } else if self.is_volatile(&candidates, width) {
                    // irrelevant
                } else {
                    panic!("{:?}", candidates.len())
                }
            }
        }
    }

    fn read_concrete(&mut self, address: u32, width: u32, stdlib: &mut ScfiaStdlib, fork_sink: &mut Option<&mut ForkSink>,) -> Rc<RefCell<ActiveValue>> {
        for region in &mut self.volatile_memory_regions {
            if address >= region.start_address && address < region.start_address + region.length {
                return region.read(address, width, stdlib, fork_sink)
            }
        }

        for region in &mut self.stable_memory_regions {
            if address >= region.start_address && address < region.start_address + region.length {
                return region.read(address, width, stdlib, fork_sink)
            }
        }

        panic!("0x{:x} {:?}", address, self.volatile_memory_regions);
    }

    fn write_concrete(&mut self, address: u32, value: Rc<RefCell<ActiveValue>>, width: u32, stdlib: &mut ScfiaStdlib, fork_sink: &mut Option<&mut ForkSink>) {
        // TODO ensure read fits in region
        for region in &mut self.stable_memory_regions {
            if address >= region.start_address && address < region.start_address + region.length {
                return region.write(address, value, width, stdlib, fork_sink)
            }
        }

        for region in &mut self.volatile_memory_regions {
            if address >= region.start_address && address < region.start_address + region.length {
                return region.write(address, value, width, stdlib, fork_sink)
            }
        }
    }

    fn is_volatile(&self, candidates: &BTreeSet<u64>, width: u32) -> bool {
        for candidate in candidates {
            let mut covered = false;
            for volatile_region in &self.volatile_memory_regions {
                if volatile_region.contains(*candidate as u32, width) {
                    covered = true;
                    break
                }
            }

            if !covered {
                println!("{:x} not covered by volatile regions", candidate);
                return false
            }
        }

        true
    }

    pub fn clone_to_stdlib(
        &self,
        cloned_active_values: &mut BTreeMap<u64, Rc<RefCell<ActiveValue>>>,
        cloned_retired_values: &mut BTreeMap<u64, Rc<RefCell<RetiredValue>>>,
        cloned_stdlib: &mut ScfiaStdlib
    ) -> Self {
        let mut cloned_memory = Self::new();

        for region in &self.stable_memory_regions {
            let cloned_region = region.clone_to_stdlib(cloned_active_values, cloned_retired_values, cloned_stdlib);
            cloned_memory.stable_memory_regions.push(cloned_region);
        }

        for region in &self.volatile_memory_regions {
            cloned_memory.volatile_memory_regions.push(VolatileMemoryRegion32 { start_address: region.start_address, length: region.length })
        }

        cloned_memory
    }
}
